Problem 2
---------

 > Each new term in the Fibonacci sequence is generated by adding the previous
 two terms. By starting with 1 and 2, the first 10 terms will be:
 >
 > 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 >
 > By considering the terms in the Fibonacci sequence whose values do not
 exceed four million, find the sum of the even-valued terms.

Start by defining an infinite sequence to generate Fibonacci values, made
possible in Haskell by lazy evaluation. In many languages, this definition
would never terminate.

> fibonacci = seq 0 1 where seq x y = x+y:seq y (x+y)

Only as many values as are required will be generated.

> euler2 n = sum . filter even . takeWhile (<= n) $ fibonacci

> tests2 =
>   [ "#2 test"    ~: 44      ~=? euler2 40
>   , "#2 problem" ~: 4613732 ~=? euler2 4000000
>   ]
